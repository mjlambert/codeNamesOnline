'use strict';

//==============================================================================
//  Modules
//==============================================================================

var Game              = require('codeNamesOnline/game');
var Player            = require('codeNamesOnline/player');
var wordGridGenerator = require('codeNamesOnline/wordGridGenerator');
var wordType          = require('codeNamesOnline/constants/wordType');

//==============================================================================
//  Games
//==============================================================================

var currentGames = [];

//==============================================================================
//  Exports
//==============================================================================

module.exports.CreateNewGame = function (socketId, callback) {
	var gameCode = GenerateGameCode();
	wordGridGenerator.generateWordGrid(function (error, wordGrid) {
		if (error) {
			return callback(error);
		}
		else {
			currentGames.push(new Game(gameCode, wordGrid, socketId));
			return callback(null, gameCode);
		}
	});
};

module.exports.RemoveGame = function (gameCode) {
	for (var i = 0; i < currentGames.length; i++) {
		if (currentGames[i].getGameCode() === gameCode) {
			currentGames[i].EndGame();
			currentGames.splice(i, 1);
		}
	}
	throw new Error('Cannot remove game. Game \'' + gameCode + '\' does not exist');
};

module.exports.AddPlayer = function (gameCode, player) {
	var game = GetGame(gameCode);
	if (game) {
		if (player.getTeam() === wordType.BLUE_TEAM) {
			game.setBlueTeamCodeMaster(player);
		}
		else if (player.getTeam() === wordType.RED_TEAM) {
			game.setRedTeamCodeMaster(player);
		}
		else {
			throw new Error('Cannot add player. Team \''
			+ player.getTeam() + '\' does not exist');
		}
	}
	else {
		throw new Error('Cannot add player. Game \'' + gameCode + '\' does not exist');
	}
};

module.exports.RemovePlayer = function (gameCode, team) {
	var game = GetGame(gameCode);
	if (game) {
		if (team === wordType.BLUE_TEAM) {
			game.removeBlueTeamCodeMaster();
		}
		else if (team === wordType.RED_TEAM) {
			game.removeRedTeamCodeMaster();
		}
		else {
			throw new Error('Cannot remove player. Team \''
			+ team + '\' does not exist');
		}
	}
	else {
		throw new Error('Cannot remove player. Game \'' + gameCode + '\' does not exist');
	}
};

module.exports.GetGameData = function (gameCode) {
	var game = GetGame(gameCode);
	if (game) {
		return game.getGameData(); 
	}
	else {
		throw new Error('Cannot get game data. Game \'' + gameCode + '\' does not exist');
	}
};

//==============================================================================
//  Private functions
//==============================================================================

function GetGame (gameCode) {
	for (var i = 0; i < currentGames.length; i++) {
		if (currentGames[i].getGameCode() === gameCode) {
			return currentGames[i];
		}
	}
	return null;
}

function GenerateGameCode () {

	var gameCode;
	var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';

	do {
		gameCode = '';
		for (var i = 0; i < 4; i++) {
			gameCode += possible.charAt(Math.floor(Math.random() * possible.length));
		}
	} while(!isUniqueGameCode(gameCode));

	return gameCode;
}

function isUniqueGameCode (gameCode) {
	for (var i = 0; i < currentGames.length; i++) {
		if (gameCode === currentGames[i].getGameCode()) {
			return false;
		}
	}
	return true;
}
