'use strict';

//==============================================================================
//  Modules
//==============================================================================

var socketManager = require('codeNamesOnline/socketManager');

//==============================================================================
//  Exports
//==============================================================================

module.exports = function (gameCode, wordGrid, socketId) {
	var self               = this;
	var gameCode           = gameCode;
	var wordGrid           = wordGrid;
	var socketId           = socketId;
	var blueTeamScore      = 0;
	var redTeamScore       = 0;
	var blueTeamCodeMaster = null;
	var redTeamCodeMaster  = null;
	var turn               = 'blue';

	// Getters

	this.getGameCode = function () {
		return gameCode;
	};

	this.getWordGrid = function () {
		return wordGrid;
	};

	this.getBlueTeamScore = function () {
		return blueTeamScore;
	};

	this.getRedTeamScore = function () {
		return redTeamScore;
	};

	this.getBlueTeamCodeMaster = function () {
		return blueTeamCodeMaster;
	};

	this.getRedTeamCodeMaster = function () {
		return redTeamCodeMaster;
	};

	this.getTurn = function () {
		return turn;
	};

	// Setters

	this.setBlueTeamCodeMaster = function (codeMaster) {
		if (blueTeamCodeMaster !== null) {
			throw new Error('This game already has a Code Master for Blue Team');
		}
		blueTeamCodeMaster = codeMaster;
		AddPlayer(blueTeamCodeMaster);
	};

	this.setRedTeamCodeMaster = function (codeMaster) {
		if (redTeamCodeMaster !== null) {
			throw new Error('This game already has a Code Master for Red Team');
		}
		redTeamCodeMaster = codeMaster;
		AddPlayer(redTeamCodeMaster);
	};

	this.removeBlueTeamCodeMaster = function () {
		blueTeamCodeMaster = null;
	};

	this.removeRedTeamCodeMaster = function () {
		redTeamCodeMaster = null;
	};

	// Public functions

	this.getGameData = function () {
		return {
			wordGrid       : wordGrid,
			blueTeamScore  : blueTeamScore,
			redTeamScore   : redTeamScore,
			turn           : turn
		};
	};

	this.selectWord = function (word) {
		// TODO Search grid for work and set chosen to true
		// Score game here too, no need for the setters above
		UpdateGame();
	};

	this.nextTurn = function () {
		if (turn === 'blue') {
			turn = 'red';
		}
		else {
			turn = 'blue';
		}
		UpdateGame();
	};

	this.EndGame = function () {
		// TODO send message to game and players ending the game.
	};

	// Private functions

	function UpdateGame () {
		var gameSocket = socketManager.GetSocket(socketId);
		if (gameSocket) {
			gameSocket.emit('updateGameData', self.getGameData);
		}
		else {
			console.log('Unable to update game! No socket');
		}
	}

	function AddPlayer (player) {
		var gameSocket = socketManager.GetSocket(socketId);
		gameSocket.emit('playerConnect', {
			name : player.getName(),
			team : player.getTeam()
		});
	}
};

