'use strict';

//==============================================================================
//  Modules
//==============================================================================

var socketManager = require('codeNamesOnline/socketManager');
var wordType      = require('codeNamesOnline/constants/wordType');

//==============================================================================
//  Exports
//==============================================================================

module.exports = function (gameCode, wordGrid, startTeam, socketId) {
	var self                = this;
	var gameCode            = gameCode;
	var wordGrid            = wordGrid;
	var socketId            = socketId;
	var turn                = startTeam;
	var blueTeamWordsLeft   = null;
	var redTeamWordsLeft    = null;
	var blueTeamChosenWords = [];
	var redTeamChosenWords  = [];
	var blueTeamCodeMaster  = null;
	var redTeamCodeMaster   = null;

	if (startTeam === 'blue') {
		blueTeamWordsLeft = 9;
		redTeamWordsLeft = 8;
	}
	else {
		blueTeamWordsLeft = 8;
		redTeamWordsLeft = 9;
	}

	// Getters

	this.getGameCode = function () {
		return gameCode;
	};

	this.getBlueTeamCodeMaster = function () {
		return blueTeamCodeMaster;
	};

	this.getRedTeamCodeMaster = function () {
		return redTeamCodeMaster;
	};

	this.getTurn = function () {
		return turn;
	};

	// Setters

	this.setBlueTeamCodeMaster = function (codeMaster) {
		if (blueTeamCodeMaster !== null) {
			throw new Error('This game already has a Code Master for Blue Team');
		}
		blueTeamCodeMaster = codeMaster;
		AddPlayer(blueTeamCodeMaster);
	};

	this.setRedTeamCodeMaster = function (codeMaster) {
		if (redTeamCodeMaster !== null) {
			throw new Error('This game already has a Code Master for Red Team');
		}
		redTeamCodeMaster = codeMaster;
		AddPlayer(redTeamCodeMaster);
	};

	this.removeBlueTeamCodeMaster = function () {
		blueTeamCodeMaster = null;
	};

	this.removeRedTeamCodeMaster = function () {
		redTeamCodeMaster = null;
	};

	// Public functions

	this.getGameData = function () {
		return {
			wordGrid            : wordGrid,
			blueTeamWordsLeft   : blueTeamWordsLeft,
			redTeamWordsLeft    : redTeamWordsLeft,
			blueTeamChosenWords : blueTeamChosenWords,
			redTeamChosenWords  : redTeamChosenWords,
			turn                : turn
		};
	};

	this.selectWord = function (word) {
		for (var x = 0; x < 5; x++) {
			for (var y = 0; y < 5; y++) {
				if (wordGrid[x][y].word === word && wordGrid[x][y].chosen === false) {
					wordGrid[x][y].chosen = true;
					if (wordGrid[x][y].type === wordType.BLUE_TEAM) {
						blueTeamWordsLeft--;
						blueTeamChosenWords.push(word);
						if (turn === 'red') {
							self.nextTurn();
						}
						if (blueTeamWordsLeft === 0) {
							self.EndGame('blue');
						}
					}
					else if (wordGrid[x][y].type === wordType.RED_TEAM) {
						redTeamWordsLeft--;
						redTeamChosenWords.push(word);
						if (turn === 'blue') {
							self.nextTurn();
						}
						if (redTeamWordsLeft === 0) {
							self.EndGame('red');
						}
					}
					else if (wordGrid[x][y].type === wordType.NO_TEAM) {
						self.nextTurn();
					}
					else if (wordGrid[x][y].type === wordType.KILL_WORD) {
						if (turn === 'blue') {
							self.EndGame('red');
						}
						else {
							self.EndGame('blue');
						}
					}
				}
			}
		}
		UpdateGame();
	};

	this.nextTurn = function () {
		if (turn === 'blue') {
			turn = 'red';
		}
		else {
			turn = 'blue';
		}
		UpdateGame();
	};

	this.EndGame = function (winningTeam) {
		// TODO send message to game and players ending the game.
	};

	// Private functions

	function UpdateGame () {
		var gameSocket = socketManager.GetSocket(socketId);
		if (gameSocket) {
			gameSocket.emit('updateGameData', self.getGameData());
		}
		else {
			console.log('Unable to update game! No socket');
		}
	}

	// Tell the frontend that a player has been added
	function AddPlayer (player) {
		var gameSocket = socketManager.GetSocket(socketId);
		gameSocket.emit('playerConnect', {
			name : player.getName(),
			team : player.getTeam()
		});
	}

};

